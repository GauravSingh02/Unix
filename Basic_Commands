File Structure:

/: The root directory is the top-level directory in the file system hierarchy. All other directories and files are contained within it.

/bin: This directory contains essential binary executable files that are necessary for basic system operations. Common command-line utilities like ls, cp, mv, and rm are stored here.

/boot: The /boot directory contains files related to the system's boot process. It typically includes the Linux kernel, initial RAM disk (initrd), boot loader configuration files (such as GRUB), and other related files.

/etc: The /etc directory stores system configuration files. It contains various configuration files for system-wide settings, services, network configurations, user authentication, and more.

/home: Each user on the system has a separate directory in /home that serves as their home directory. Users can store their personal files and directories here.

/lib and /lib64: These directories contain libraries required by the binaries in /bin and /sbin. The /lib directory typically contains 32-bit libraries, while /lib64 contains 64-bit libraries on 64-bit systems.

/mnt and /media: These directories are used as mount points for temporarily attaching external storage devices like USB drives, CD-ROMs, or network shares. /mnt is traditionally used for manually mounted devices, while /media is used for automatically mounted devices.

/opt: This directory is commonly used to install optional or third-party software packages. It provides a location to install software that is not managed by the system's package manager.

/sbin: The /sbin directory contains system binaries that are typically used by administrators or during system maintenance. These executables perform critical system management tasks and require elevated privileges.

/tmp: The /tmp directory is used for storing temporary files that are created and accessed by programs during runtime. The contents of this directory are typically cleared upon reboot.

/usr: The /usr directory contains user-related files and programs. It has subdirectories such as /usr/bin for user binaries, /usr/include for C header files, /usr/lib for libraries, /usr/share for shared data, and more.

/var: The /var directory contains variable files that can change in size or content over time. It includes log files (/var/log), spool files for printers or mail servers (/var/spool), temporary files (/var/tmp), and other variable data.
 
Absolute Path: An absolute path in Linux starts with the root directory / and specifies the complete location of a file or directory in the file system. Here are a few examples:

/home/user/Documents/file.txt: Absolute path to a file called file.txt located in the Documents directory under the user's home directory.
/usr/bin/python3: Absolute path to the python3 executable located in the /usr/bin directory.

Relative Path: A relative path in Linux specifies the location of a file or directory relative to the current working directory. It does not start with the root directory but instead references the file or directory based on the current location. Here are a few examples:

If the current working directory is /home/user/:
Documents/file.txt: Relative path to a file called file.txt located in the Documents directory under the current directory.
../photos/image.jpg: Relative path to a file called image.jpg located in the photos directory one level up from the current directory.

2. Cron tab
The cron command is used to repeatedly schedule a task at a specific time. The tasks are stored in a cron file and then executed using the cron command. The cron command reads the string from this file and schedules the task. The syntax for the string to enter in the cron file is as follows:

<minute> <hour> <day> <month> <weekday> <command>

another example of executing the date command after every 15 seconds:

* * * * * date>> /tmp/date.log  ## here your cron job should run every minute of every hour of every day of every month, each day of the week
* * * * * sleep 15; date>> /tmp/date.log
* * * * * sleep 30; date>> /tmp/date.log
* * * * * sleep 45; date>> /tmp/date.log

Command to execute a cron after every 5 minutes.
*/5 * * * * 

Cron scheduler command helps you to execute the task on every Monday at 5 AM
0 5 * * Mon

This example will run each Monday and Wednesday at 5 PM.
0 17 * * mon,wed 

What does 0 * * * * mean in crontab?
0 * * * * Execute a cron job every hour. 0 12 * * * Fire at 12:00 PM (noon) every day

# Using crontab utility add a cron for user root to run below given command:"/usr/bin/touch weekly"   Make it run at 11:00AM on every Sunday.
Solution: Execute command sudo crontab -e and add below given code
     0 11 * * 0 /usr/bin/touch weekly

# Add a cron for bob user to execute sudo systemctl restart nginx command on Sundays every week at 6am and 11pm.
Solution: Execute command sudo crontab -e and add below given code
         0 6,23 * * 0 sudo systemctl restart nginx

cronjob every 5 sec 
crontab -e ## Open your crontab for editing
* * * * * /path/to/your/script.sh ## Add a line to your crontab file that runs a script every minute
------------ script.sh --------
#!/bin/bash
sleep 30
# Your task/command here
echo "Task executed at $(date)"
-----------------------------------
## This setup will effectively run your task every 30 seconds

you can get crontab details under "/etc/crontab" 

back ticks `` & $() is same command subsitution

To make it permanent use to Enviornment Variables ( under home directory .profile .bashrc etc. )

#### stat command will give more metadata about files (including links)
$ stat {file_name}

3. How to create, read and delete files?
The touch command is used for creating files.
Example: #touch filename
 
The cat command is used for reading files.
Example: #cat filename

The rm command is used  for delete a file.
Example: #rm –f  filename 

4. How to create,copy and delete a directory?
The mkdir command is used for creating a directory. 
Example: # mkdir filename

Copy the directory
cp -r [source] [destination]
$ cp -r receipts/ backupof_receipts/   ### This will work if there is no directory on target

The rmdir command is used for remove directory 
Example: #rmdir directory (will work only when directory is empty)
or rm -rf directory/ ( Remove recurvsively and forcefully)

[gaurav@centos-host ~]$ rmdir lfcs
rmdir: failed to remove 'lfcs': Directory not empty
[gaurav@centos-host ~]$ rm -r lfcs

5. How to create multiple text files and directories?
To create multiple text file touch file name {} command is used. 

Example: Suppose we want create 4 files then we type:
#touch filename{1..4}

To create multiple directory mkdir filename {} command is used.

Example:Suppose we want to create 4 directory, then we type:
mkdir filename {1..4}
mkdir -p /tmp/asia/india/bangalore  ## Create multiple directories in one shot

6. What is the use of head and tail command?
Head command is used for display started 10 lines
Tail command is used for display started 10 lines

7. How to find the current shell which you are using?
$echo $SHELL command is used for find current shell.

8. How to find an available shell in your system?
Cat /etc/shells command is used to find available shells in your system.

9. How to create shortcuts in Linux?
To create shortcut “link” command use.

### There are two types of link:
Hard link : it refer the inode number
A hard link acts as a copy (mirrored) of the selected file. It accesses the data available in the original file.
If the earlier selected file is deleted, the hard link to the file will still contain the data of that file
Can't be used for Directory & Only hardlink to files on the same filesystem
Only hardlink to files on the same filesystem

Soft link
A soft link (also known as Symbolic link) acts as a pointer or a reference to the file name. It does not access the data available in the original file. If the earlier file is deleted, the soft link will be pointing to a file that does not exist anymore
Softlink to files and folders
Softlink to files on different filesystem as well

here "link_to_tmp" is soft link and "hlink" is hardlink 
commands: 
ln -s /tmp /home/bob/link_to_tmp
ln /tmp/hlink /home/bob/hlink

lrwxrwxrwx 1 bob  bob     4 Aug  3 10:04 link_to_tmp -> /tmp
-rw-r--r-- 2 bob  bob     0 Aug  3 10:04 hlink

## Through "Stat" command you can get the details about links

10. Tell me the difference between hard link and soft link?
Deleting the original file does not affect the hard link but Deleting the original file makes the soft link inactive.

11. How will you pass and access arguments to a script in Linux?
For pass arguments in script “scriptname arg1 arg2 arg3 …” 

For access arguments in script can be accessed inside the script as “$1 , $2 .. $n”

12. What is the significance of $#?
It represents the total number of arguments passed by string.

13. What is the difference between $* and $@?
$* consider the entire set of positional parameters as a single string, but $@ treat each quoted argument as a separate argument.

14. Explain “s” permission bit in a file? 
“s” bit also called “set user id”(SUID) bit. “s” on file causes the process to have the privileges of the owner of the file during the instance of the program.

15. What are the different types of variables used in Shell Script?
System defined variable: System defined variable created by os itself. These variables are generally defined in capital letters. It can be viewed by the “set” command.

User defined variable: It created by system users. Value of variable can be view by using “echo $variablename” command.

16. What is the difference between = and ==?
= is used for assigning value to a variable.

== is used for string comparison.

17. What is the use of a pipe operator? How to execute multiple commands in one line?
The pipe operator is used for one by one execution of command but commands should not be dependent on each other.

18. What are the different modes of vi editors?
Command mode: this is a mode where you start

Edit mode: This mode allows you to do next editing.

Ex mode: In this mode you interact with vi with instruction to process

19. What is redirection?
Redirection is the process of direction data from one output to another.

20. How to find the status of the process?
Ps ux command user for find status of process.

21. How to check memory status?
Free command is useful for checking memory status.

Use cat for quickly displaying the contents of smaller files.
Use more for viewing longer files one screen at a time, without advanced features.
Use less for more advanced viewing and navigation of larger files.

22. How to debug a shell script?
To debug a shell script we execute the script with the “-x” or “-nv”  option.

23. Which command is used for comparing the string in the shell script?
To compare the string “test” command is used.

24. What is the difference between $! and $$?
$! Shows process id of the process that recently went into background 

$$  gives the process id of the currently executing process

25. Which command is used to find all information of the user?
“finger” command shows all information of users.

26. Which four fundamental components of every file system?
Boot block: It contains a small program called MBR which loads the kernel during system boot up.

Super block: Super block contains all information about the file system.

Inode block: It contains inode for every file of the file system.

==== Redirect =====
cat file1.txt file2.txt > newfile.txt ( newfile will have both file1 & file2 content )

>> will append the content wherever > just update it



27. What is the Crontab?
Crontab stands for cron table because it uses the job scheduler cron to execute tasks. The crontab is a list of commands that you want to run on a regular schedule, and also the name of the command used to manage that list. 

28. How many fields are present in a crontab file?
The five fields contain information on when to execute the command.

minute(0-59)
hour(0-23)
day(1-31) 
month(1-12)
day of the week(0-6, Sunday = 0).
29. What are the two files of crontab command?
cron.allow which decides the users need to be permitted for using the crontab command.

cron.deny which decides the users need to be prevented from using the crontab command

30. What are the different commands available to check the disk usage?
df: It is used to check the free disk space.
du: It is used to check the directory wise disk usage.
dfspace: It is used to check the free disk space in terms of MB.
31.  How to open a read-only file in the Shell?
vi –R <Filename>
32. How to find out how long the system has been running? 
By using the command “uptime”.

33. How to connect to a remote server and execute some commands?
We can use ssh to do this: 

ssh username@serverIP -p sshport 
Once the above command is executed, enter the password.

34. How to connect to a database server from Linux? 
mysql –S serverName –U username –P password
35. How can I set the default permission to all users on every file which is created in the current shell? 
umask 777
36. How will I insert a line “ABCD” at every 50th line of a file? 
sed  '50i\ABCD' filename 
37. How to find the total disk space used by a specific user? 
du -s /home/username 
38. How to print the login names of all users on a system? 
/etc/shadow file has all the users listed. 

awk –F ':' '{print $1}' /etc/shadow|uniq –u
39. Write a shell script to get current date, time, username and current working directory.
#!/bin/sh
echo "Hello, $LOGNAME"
echo "Today's date is `date`"
echo "Username is `who i am`"
echo "Current directory is `pwd`"
40. How to check if a directory exists?
#!/bin/sh
if [ -d $mydir ]
then
echo "Directory exists"
fi
41. Explain the file permissions.
r – read 4

w – write 2

e – execute 1

42. Given a file, replace all occurrence of word “ABC” with “DEF” from 10th line till end in only those lines that contains word “MNO” 
sed –n '10,$p' file1|sed '/MNO/s/ABC/DEF/'
43. How will you find the 19th line of a file using only tail and head command? 
tail +19 file1|head -1 
44. How to Use the sed command to replace the content of the file?
if cat fille
ABCD
EFGH
Then O/p should be 
EFGH
ABCD 

sed '1! G; h;$!d' file1

45. I want to create a directory such that anyone in the group can create a file and access any person’s file in it but none should be able to delete a file other than the one created by himself. 
We can create the directory giving read and execute access to everyone in the group and setting its sticky bit “t” on as follows: 
mkdir direc1
chmod g+wx direc1
chmod +t direc1  or chmod 1644 direc1  ( here 1 is sticky bit )

46. How to get the 3rd element/column from each line from a file?
#!/bin/sh
awk '{print $3}' $1
47. Write down the Syntax for all the loops in Shell Scripting.
For Loop:

for var in word1 word2 ... wordn
do
Statement(s) to be executed for every word.
done
While Loop:

while command
do
Statement(s) to be executed if command is true
Done
Until Loop:

until command
do
Statement(s) to be executed until command is true
done
48. How to pass arguments to a script?
./script argument  used for passed argument to a script.

Example:

./script.sh  file.txt
cat script.sh
#!bin/bash
Cat $1
49. How to use arguments in the script?
In the script we use first argument as $1 and second argument as $2 

Example: To move file one destination($1) to another($2)

./move.sh file.txt /text
cat move.sh
#!/bin/bash
mv $1 $2
50. How to get 5rd element from each line from the file?
awk ‘{print $5}’
51. how to find process name from process ID?
“ps –p pid” command used to find the process name.

52. How to create alias command in shell?
Alias name = ”command whose alias to be created”.

53 . What is the c and b permission field of the file?
C specifies whether the file is character special file or block special file.

54. How to get 5rd element from each line from the file?
awk ‘{print $5}’
55. What is the use of a shebang line?
Shebang line at the top of each script determines the location of the engine which is to be used in order to execute the script.

56. How to add two strings?
S1=”hello”
S2=”world”
Let s3=$s1+$s2
Echo $s3
57. How to add two integers?
Int1=3
Int2=2
Int3=$int1+$int2
Echo $int3
58. Write a script to check if a file exists on the system?
If [-f /var/www/html]
Then 
Echo “file exists”
Fi
59. Why #!/bin/sh or #!/bin/bash at the beginning of every script?
That line tells which shell to use. 

60. From given file name find the count of lines containing word  “ABC”
grep –c “ABC” filename
61. What would be the output of command: echo ${new:-variable}
Output: variable 

62. How to print all array indexes?
echo ${!array[@]} used to print all array indexes.
63. How to remove elements from an array with id 3?
Unset array[3]
64. Write a script to compare numbers?
#!/bin/bash
X=10
Y=20
If [ $x –gt $y ]
Then 
Echo “ x is greater than y”
Else 
Echo “y is greater than x”
Fi
65. What are the types of permission at the file level in Shell?
Owner permissions: The permissions granted to a user with all the rights at the root level.

Group permissions: The permissions granted to a user with all the rights in a particular group.

Other  permissions: The permissions granted to a user with all the rights globally to a file.

66. How  to use comments in shell scripting?
#! /bin/bash
# addition
((sum=30+20))
#print
Echo$sum
67. How to use multi-line comments in shell scripting?
#! /bin/bash
: ‘
This script calculates squares of 8.
‘
((square=8*8))
echo $area
68. Write a script that receive input from user.
#! /bin/bash
Echo  –n  “enter input:”
read input
echo “ you entered: $input”
69. Write a script using the AND operator.
#! /bin/bash
Echo –n “enter number:”
read number
if  [[ ($number  –lt 10 )  && ($number%2  –eq  0)]]
echo  “even number”
else 
echo “odd number”
fi
70. Write an example of OR operator.
#! /bin/bash
Echo –n “enter any number : “
read n
if  [[ ( $n –eq 10 || $n  -eq 45) ]]
then 
echo “ you win”

else  “ you lost!”
fi
example of elif 
#! /bin/bash
Echo –n “enter number :”
read number 
if  [[ $number  -gt 10]]
then 
echo “number  is greater than 10”
elif  [[ $num –eq 10 ]]
then 
echo ‘number is equal to 10”
else 
echo “ number  is less than 10”
fi
71. Write a script for adding multiple values.
#! /bin/bash
Sum=0
For (( counter=1 ; counter<5 ;counter++))
Do
Echo –n “enter your number”
read n
(( sum+=n))
#echo –n “$counter”
Done 
Printf   “\n”
echo  “result is : $ sum”
72. Write an example of a function.
#! /bin/bash 
Function Add()
{
echo  –n “enter number:”
read a
echo  –n  “enter 2nd number :”
read b
echo “addition  is: $((  a+b ))”
}
Add
73. How to send mail using shell script?
#! /bin/bash
Recipientadmin@example.com
Subject=”script”
Message=”this mail send by script”
‘mail –s $subject $recipient <<< $message’
74. Write script to print current date and time.
#! /bin/bash
year= ‘date +%Y’
month=’date  +%m’
day=’date +%d’
hour=’date +% H’
minute=’date +%M’
second=’date +%S’
echo ‘date’
echo  “current date is :$day-$month=$year”
echo  “current time is :$hour:$minute:$second”
